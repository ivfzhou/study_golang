// protoc --go_out=./ --proto_path=./ protobuf/sample.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-ivfzhou See: https://github.com/ivfzhou/protobuf-go
// 	protoc        v3.21.9
// source: protobuf/sample.proto

package protobuf

import (
	reflect "reflect"
	sync "sync"

	_ "gitee.com/ivfzhou/study_golang/protobuf/import"
	public "gitee.com/ivfzhou/study_golang/protobuf/public"
	_ "github.com/ivfzhou/protobuf-go/cmd/protoc-gen-go/descriptor"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AllowAlias int32

const (
	AllowAlias_ALLOW_ALIAS_UNSPECIFIED AllowAlias = 0
	AllowAlias_ALLOW_ALIAS_STARTED     AllowAlias = 1
	AllowAlias_ALLOW_ALIAS_RUNNING     AllowAlias = 1
)

// Enum value maps for AllowAlias.
var (
	AllowAlias_name = map[int32]string{
		0: "ALLOW_ALIAS_UNSPECIFIED",
		1: "ALLOW_ALIAS_STARTED",
		// Duplicate value: 1: "ALLOW_ALIAS_RUNNING",
	}
	AllowAlias_value = map[string]int32{
		"ALLOW_ALIAS_UNSPECIFIED": 0,
		"ALLOW_ALIAS_STARTED":     1,
		"ALLOW_ALIAS_RUNNING":     1,
	}
)

func (x AllowAlias) Enum() *AllowAlias {
	p := new(AllowAlias)
	*p = x
	return p
}

func (x AllowAlias) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowAlias) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_sample_proto_enumTypes[0].Descriptor()
}

func (AllowAlias) Type() protoreflect.EnumType {
	return &file_protobuf_sample_proto_enumTypes[0]
}

func (x AllowAlias) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllowAlias.Descriptor instead.
func (AllowAlias) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_sample_proto_rawDescGZIP(), []int{0}
}

type Test int32

const (
	Test_TEST_UNSPECIFIED Test = 0
	Test_TEST_FIRST       Test = 1
)

// Enum value maps for Test.
var (
	Test_name = map[int32]string{
		0: "TEST_UNSPECIFIED",
		1: "TEST_FIRST",
	}
	Test_value = map[string]int32{
		"TEST_UNSPECIFIED": 0,
		"TEST_FIRST":       1,
	}
)

func (x Test) Enum() *Test {
	p := new(Test)
	*p = x
	return p
}

func (x Test) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Test) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_sample_proto_enumTypes[1].Descriptor()
}

func (Test) Type() protoreflect.EnumType {
	return &file_protobuf_sample_proto_enumTypes[1]
}

func (x Test) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Test.Descriptor instead.
func (Test) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_sample_proto_rawDescGZIP(), []int{1}
}

type Inner_E int32

const (
	Inner_zero Inner_E = 0
)

// Enum value maps for Inner_E.
var (
	Inner_E_name = map[int32]string{
		0: "zero",
	}
	Inner_E_value = map[string]int32{
		"zero": 0,
	}
)

func (x Inner_E) Enum() *Inner_E {
	p := new(Inner_E)
	*p = x
	return p
}

func (x Inner_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Inner_E) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_sample_proto_enumTypes[2].Descriptor()
}

func (Inner_E) Type() protoreflect.EnumType {
	return &file_protobuf_sample_proto_enumTypes[2]
}

func (x Inner_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Inner_E.Descriptor instead.
func (Inner_E) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_sample_proto_rawDescGZIP(), []int{2, 0}
}

type Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*Req_ID
	//	*Req_OBSOLETEName
	Query isReq_Query `protobuf_oneof:"Query"`
	P1    float32     `protobuf:"fixed32,3,opt,name=P1,proto3" json:"P1" header:"p1" uri:"p1"`
	// Deprecated: Do not use.
	E []AllowAlias `protobuf:"varint,4,rep,packed,name=e,json=allowAliasEnum,proto3,enum=protobuf.AllowAlias" json:"allowAliasEnum"`
}

func (x *Req) Reset() {
	*x = Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_sample_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req) ProtoMessage() {}

func (x *Req) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_sample_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req.ProtoReflect.Descriptor instead.
func (*Req) Descriptor() ([]byte, []int) {
	return file_protobuf_sample_proto_rawDescGZIP(), []int{0}
}

func (m *Req) GetQuery() isReq_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *Req) GetID() int32 {
	if x, ok := x.GetQuery().(*Req_ID); ok {
		return x.ID
	}
	return 0
}

func (x *Req) GetOBSOLETEName() string {
	if x, ok := x.GetQuery().(*Req_OBSOLETEName); ok {
		return x.OBSOLETEName
	}
	return ""
}

func (x *Req) GetP1() float32 {
	if x != nil {
		return x.P1
	}
	return 0
}

// Deprecated: Do not use.
func (x *Req) GetE() []AllowAlias {
	if x != nil {
		return x.E
	}
	return nil
}

type isReq_Query interface {
	isReq_Query()
}

type Req_ID struct {
	ID int32 `protobuf:"varint,1,opt,name=ID,proto3,oneof"`
}

type Req_OBSOLETEName struct {
	OBSOLETEName string `protobuf:"bytes,2,opt,name=OBSOLETE_name,json=OBSOLETEName,proto3,oneof"`
}

func (*Req_ID) isReq_Query() {}

func (*Req_OBSOLETEName) isReq_Query() {}

type Rsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Any *anypb.Any `protobuf:"bytes,1,opt,name=any,proto3" json:"any"`
	E   Inner_E    `protobuf:"varint,2,opt,name=e,proto3,enum=protobuf.Inner_E" json:"e"`
}

func (x *Rsp) Reset() {
	*x = Rsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_sample_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rsp) ProtoMessage() {}

func (x *Rsp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_sample_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rsp.ProtoReflect.Descriptor instead.
func (*Rsp) Descriptor() ([]byte, []int) {
	return file_protobuf_sample_proto_rawDescGZIP(), []int{1}
}

func (x *Rsp) GetAny() *anypb.Any {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *Rsp) GetE() Inner_E {
	if x != nil {
		return x.E
	}
	return Inner_zero
}

type Inner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Inner) Reset() {
	*x = Inner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_sample_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inner) ProtoMessage() {}

func (x *Inner) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_sample_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inner.ProtoReflect.Descriptor instead.
func (*Inner) Descriptor() ([]byte, []int) {
	return file_protobuf_sample_proto_rawDescGZIP(), []int{2}
}

type TestSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num  int32             `protobuf:"varint,1,opt,name=num,proto3" json:"num"`
	Num2 int32             `protobuf:"zigzag32,2,opt,name=num2,proto3" json:"num2"`
	Str  string            `protobuf:"bytes,3,opt,name=str,proto3" json:"str"`
	Num3 []int32           `protobuf:"varint,4,rep,packed,name=num3,proto3" json:"num3"`
	E    Test              `protobuf:"varint,5,opt,name=e,proto3,enum=protobuf.Test" json:"e"`
	M    map[int32]string  `protobuf:"bytes,6,rep,name=m,proto3" json:"m" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tm   *TestSample_TestM `protobuf:"bytes,7,opt,name=tm,proto3" json:"tm"`
	F    float32           `protobuf:"fixed32,8,opt,name=f,proto3" json:"f"`
	Fx   int32             `protobuf:"fixed32,9,opt,name=fx,proto3" json:"fx"`
	Bs   []byte            `protobuf:"bytes,10,opt,name=bs,proto3" json:"bs"`
	Kvs  []*KV             `protobuf:"bytes,11,rep,name=kvs,proto3" json:"kvs"`
	Es   []Test            `protobuf:"varint,12,rep,packed,name=es,proto3,enum=protobuf.Test" json:"es"`
	Num4 int32             `protobuf:"varint,1025,opt,name=num4,proto3" json:"num4"`
}

func (x *TestSample) Reset() {
	*x = TestSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_sample_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSample) ProtoMessage() {}

func (x *TestSample) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_sample_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSample.ProtoReflect.Descriptor instead.
func (*TestSample) Descriptor() ([]byte, []int) {
	return file_protobuf_sample_proto_rawDescGZIP(), []int{3}
}

func (x *TestSample) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *TestSample) GetNum2() int32 {
	if x != nil {
		return x.Num2
	}
	return 0
}

func (x *TestSample) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *TestSample) GetNum3() []int32 {
	if x != nil {
		return x.Num3
	}
	return nil
}

func (x *TestSample) GetE() Test {
	if x != nil {
		return x.E
	}
	return Test_TEST_UNSPECIFIED
}

func (x *TestSample) GetM() map[int32]string {
	if x != nil {
		return x.M
	}
	return nil
}

func (x *TestSample) GetTm() *TestSample_TestM {
	if x != nil {
		return x.Tm
	}
	return nil
}

func (x *TestSample) GetF() float32 {
	if x != nil {
		return x.F
	}
	return 0
}

func (x *TestSample) GetFx() int32 {
	if x != nil {
		return x.Fx
	}
	return 0
}

func (x *TestSample) GetBs() []byte {
	if x != nil {
		return x.Bs
	}
	return nil
}

func (x *TestSample) GetKvs() []*KV {
	if x != nil {
		return x.Kvs
	}
	return nil
}

func (x *TestSample) GetEs() []Test {
	if x != nil {
		return x.Es
	}
	return nil
}

func (x *TestSample) GetNum4() int32 {
	if x != nil {
		return x.Num4
	}
	return 0
}

type KV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   int32  `protobuf:"varint,1,opt,name=key,proto3" json:"key"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
}

func (x *KV) Reset() {
	*x = KV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_sample_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KV) ProtoMessage() {}

func (x *KV) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_sample_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KV.ProtoReflect.Descriptor instead.
func (*KV) Descriptor() ([]byte, []int) {
	return file_protobuf_sample_proto_rawDescGZIP(), []int{4}
}

func (x *KV) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *KV) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type TestAny struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Any *anypb.Any `protobuf:"bytes,1,opt,name=any,proto3" json:"any"`
}

func (x *TestAny) Reset() {
	*x = TestAny{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_sample_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAny) ProtoMessage() {}

func (x *TestAny) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_sample_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAny.ProtoReflect.Descriptor instead.
func (*TestAny) Descriptor() ([]byte, []int) {
	return file_protobuf_sample_proto_rawDescGZIP(), []int{5}
}

func (x *TestAny) GetAny() *anypb.Any {
	if x != nil {
		return x.Any
	}
	return nil
}

type TestOneof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to One:
	//
	//	*TestOneof_A
	//	*TestOneof_B
	One isTestOneof_One `protobuf_oneof:"One"`
}

func (x *TestOneof) Reset() {
	*x = TestOneof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_sample_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestOneof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestOneof) ProtoMessage() {}

func (x *TestOneof) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_sample_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestOneof.ProtoReflect.Descriptor instead.
func (*TestOneof) Descriptor() ([]byte, []int) {
	return file_protobuf_sample_proto_rawDescGZIP(), []int{6}
}

func (m *TestOneof) GetOne() isTestOneof_One {
	if m != nil {
		return m.One
	}
	return nil
}

func (x *TestOneof) GetA() string {
	if x, ok := x.GetOne().(*TestOneof_A); ok {
		return x.A
	}
	return ""
}

func (x *TestOneof) GetB() int32 {
	if x, ok := x.GetOne().(*TestOneof_B); ok {
		return x.B
	}
	return 0
}

type isTestOneof_One interface {
	isTestOneof_One()
}

type TestOneof_A struct {
	A string `protobuf:"bytes,3,opt,name=a,proto3,oneof"`
}

type TestOneof_B struct {
	B int32 `protobuf:"varint,1,opt,name=b,proto3,oneof"`
}

func (*TestOneof_A) isTestOneof_One() {}

func (*TestOneof_B) isTestOneof_One() {}

type Inner_M struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Inner_M) Reset() {
	*x = Inner_M{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_sample_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inner_M) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inner_M) ProtoMessage() {}

func (x *Inner_M) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_sample_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inner_M.ProtoReflect.Descriptor instead.
func (*Inner_M) Descriptor() ([]byte, []int) {
	return file_protobuf_sample_proto_rawDescGZIP(), []int{2, 0}
}

type TestSample_TestM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	I int32 `protobuf:"varint,1,opt,name=i,proto3" json:"i"`
}

func (x *TestSample_TestM) Reset() {
	*x = TestSample_TestM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_sample_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSample_TestM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSample_TestM) ProtoMessage() {}

func (x *TestSample_TestM) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_sample_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSample_TestM.ProtoReflect.Descriptor instead.
func (*TestSample_TestM) Descriptor() ([]byte, []int) {
	return file_protobuf_sample_proto_rawDescGZIP(), []int{3, 1}
}

func (x *TestSample_TestM) GetI() int32 {
	if x != nil {
		return x.I
	}
	return 0
}

var file_protobuf_sample_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50000,
		Name:          "protobuf.my_file_option",
		Tag:           "bytes,50000,opt,name=my_file_option",
		Filename:      "protobuf/sample.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*AllowAlias)(nil),
		Field:         50000,
		Name:          "protobuf.my_service_option",
		Tag:           "varint,50000,opt,name=my_service_option,enum=protobuf.AllowAlias",
		Filename:      "protobuf/sample.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*public.Data)(nil),
		Field:         50000,
		Name:          "protobuf.my_method_option",
		Tag:           "bytes,50000,opt,name=my_method_option",
		Filename:      "protobuf/sample.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*int32)(nil),
		Field:         50000,
		Name:          "protobuf.my_message_option",
		Tag:           "varint,50000,opt,name=my_message_option",
		Filename:      "protobuf/sample.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*float32)(nil),
		Field:         50000,
		Name:          "protobuf.my_field_option",
		Tag:           "fixed32,50000,opt,name=my_field_option",
		Filename:      "protobuf/sample.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: ([]string)(nil),
		Field:         50001,
		Name:          "protobuf.my_tag_option",
		Tag:           "bytes,50001,rep,name=my_tag_option",
		Filename:      "protobuf/sample.proto",
	},
	{
		ExtendedType:  (*descriptorpb.OneofOptions)(nil),
		ExtensionType: (*int64)(nil),
		Field:         50000,
		Name:          "protobuf.my_oneof_option",
		Tag:           "varint,50000,opt,name=my_oneof_option",
		Filename:      "protobuf/sample.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50000,
		Name:          "protobuf.my_enum_option",
		Tag:           "varint,50000,opt,name=my_enum_option",
		Filename:      "protobuf/sample.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         50001,
		Name:          "protobuf.my_enum_value_option",
		Tag:           "varint,50001,opt,name=my_enum_value_option",
		Filename:      "protobuf/sample.proto",
	},
}

// Extension fields to descriptorpb.FileOptions.
var (
	// optional string my_file_option = 50000;
	E_MyFileOption = &file_protobuf_sample_proto_extTypes[0]
)

// Extension fields to descriptorpb.ServiceOptions.
var (
	// optional protobuf.AllowAlias my_service_option = 50000;
	E_MyServiceOption = &file_protobuf_sample_proto_extTypes[1]
)

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional protobuf.public.Data my_method_option = 50000;
	E_MyMethodOption = &file_protobuf_sample_proto_extTypes[2]
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional int32 my_message_option = 50000;
	E_MyMessageOption = &file_protobuf_sample_proto_extTypes[3]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional float my_field_option = 50000;
	E_MyFieldOption = &file_protobuf_sample_proto_extTypes[4]
	// repeated string my_tag_option = 50001;
	E_MyTagOption = &file_protobuf_sample_proto_extTypes[5]
)

// Extension fields to descriptorpb.OneofOptions.
var (
	// optional int64 my_oneof_option = 50000;
	E_MyOneofOption = &file_protobuf_sample_proto_extTypes[6]
)

// Extension fields to descriptorpb.EnumOptions.
var (
	// optional bool my_enum_option = 50000;
	E_MyEnumOption = &file_protobuf_sample_proto_extTypes[7]
)

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// optional uint32 my_enum_value_option = 50001;
	E_MyEnumValueOption = &file_protobuf_sample_proto_extTypes[8]
)

var File_protobuf_sample_proto protoreflect.FileDescriptor

var file_protobuf_sample_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2,
	0x01, 0x0a, 0x03, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0d, 0x4f, 0x42, 0x53, 0x4f,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x48, 0x0a, 0x02, 0x50, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x38, 0xc2, 0xb8, 0x02,
	0x09, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x70, 0x31, 0xc2, 0xb8, 0x02, 0x06, 0x75, 0x72,
	0x69, 0x3a, 0x70, 0x31, 0x85, 0xb5, 0x18, 0x00, 0x00, 0x80, 0x3f, 0x8a, 0xb5, 0x18, 0x09, 0x74,
	0x61, 0x67, 0x3a, 0x22, 0x74, 0x61, 0x67, 0x22, 0x8a, 0xb5, 0x18, 0x09, 0x74, 0x61, 0x67, 0x3a,
	0x22, 0x74, 0x61, 0x67, 0x22, 0x52, 0x02, 0x50, 0x31, 0x12, 0x35, 0x0a, 0x01, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x04, 0x10, 0x01, 0x18, 0x01,
	0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x75, 0x6d,
	0x3a, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x42, 0x0d, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x10, 0x4a, 0x05, 0x08, 0x10, 0x10,
	0x80, 0x10, 0x4a, 0x09, 0x08, 0x80, 0x10, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x03, 0x52, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x6e,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x03, 0x61,
	0x6e, 0x79, 0x12, 0x1f, 0x0a, 0x01, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x45,
	0x52, 0x01, 0x65, 0x22, 0x1b, 0x0a, 0x05, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x03, 0x0a, 0x01,
	0x4d, 0x22, 0x0d, 0x0a, 0x01, 0x45, 0x12, 0x08, 0x0a, 0x04, 0x7a, 0x65, 0x72, 0x6f, 0x10, 0x00,
	0x22, 0x9d, 0x03, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x04, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x33, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x33, 0x12, 0x1c, 0x0a, 0x01, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x01, 0x65, 0x12, 0x29, 0x0a, 0x01, 0x6d, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x01, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x52, 0x02, 0x74, 0x6d,
	0x12, 0x0c, 0x0a, 0x01, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x66, 0x12, 0x0e,
	0x0a, 0x02, 0x66, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x02, 0x66, 0x78, 0x12, 0x0e,
	0x0a, 0x02, 0x62, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x62, 0x73, 0x12, 0x1e,
	0x0a, 0x03, 0x6b, 0x76, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4b, 0x56, 0x52, 0x03, 0x6b, 0x76, 0x73, 0x12, 0x1e,
	0x0a, 0x02, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x02, 0x65, 0x73, 0x12, 0x13,
	0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x34, 0x18, 0x81, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e,
	0x75, 0x6d, 0x34, 0x1a, 0x34, 0x0a, 0x06, 0x4d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x15, 0x0a, 0x05, 0x54, 0x65, 0x73,
	0x74, 0x4d, 0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x69,
	0x22, 0x2c, 0x0a, 0x02, 0x4b, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x31,
	0x0a, 0x07, 0x54, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x6e, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x03, 0x61, 0x6e,
	0x79, 0x22, 0x32, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x0e,
	0x0a, 0x01, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x01, 0x61, 0x12, 0x0e,
	0x0a, 0x01, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x01, 0x62, 0x42, 0x05,
	0x0a, 0x03, 0x4f, 0x6e, 0x65, 0x2a, 0x6d, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x17, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x4c, 0x49,
	0x41, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x1a, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x80, 0xb5, 0x18, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x4c, 0x49,
	0x41, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x1a, 0x06, 0x10, 0x01,
	0x80, 0xb5, 0x18, 0x01, 0x2a, 0x2c, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x10, 0x01, 0x32, 0x4e, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x73, 0x70, 0x22, 0x0f, 0x82, 0xb5, 0x18,
	0x0b, 0x0a, 0x07, 0x69, 0x76, 0x66, 0x7a, 0x68, 0x6f, 0x75, 0x10, 0x12, 0x1a, 0x04, 0x80, 0xb5,
	0x18, 0x00, 0x3a, 0x47, 0x0a, 0x0e, 0x6d, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x3a, 0x66, 0x0a, 0x11, 0x6d,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52,
	0x0f, 0x6d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x3a, 0x64, 0x0a, 0x10, 0x6d, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x6d, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x3a, 0x50, 0x0a, 0x11, 0x6d, 0x79, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x3a, 0x4a, 0x0a, 0x0f, 0x6d,
	0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x3a, 0x43, 0x0a, 0x0d, 0x6d, 0x79, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd1, 0x86, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x79, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x4a, 0x0a, 0x0f,
	0x6d, 0x79, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0,
	0x86, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x79, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x3a, 0x47, 0x0a, 0x0e, 0x6d, 0x79, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x6d, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x3a, 0x57, 0x0a, 0x14, 0x6d, 0x79, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd1, 0x86, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x89, 0x01, 0x0a, 0x15, 0x69,
	0x76, 0x66, 0x7a, 0x68, 0x6f, 0x75, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x42, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x48, 0x01,
	0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	0x76, 0x66, 0x7a, 0x68, 0x6f, 0x75, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x80,
	0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x03, 0x54, 0x50,
	0x42, 0xaa, 0x02, 0x13, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x20, 0x43, 0x23, 0x20, 0xe7, 0x9a,
	0x84, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0x8d, 0x82, 0xb5, 0x18, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_sample_proto_rawDescOnce sync.Once
	file_protobuf_sample_proto_rawDescData = file_protobuf_sample_proto_rawDesc
)

func file_protobuf_sample_proto_rawDescGZIP() []byte {
	file_protobuf_sample_proto_rawDescOnce.Do(func() {
		file_protobuf_sample_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_sample_proto_rawDescData)
	})
	return file_protobuf_sample_proto_rawDescData
}

var file_protobuf_sample_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protobuf_sample_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_protobuf_sample_proto_goTypes = []interface{}{
	(AllowAlias)(0),                       // 0: protobuf.AllowAlias
	(Test)(0),                             // 1: protobuf.Test
	(Inner_E)(0),                          // 2: protobuf.Inner.E
	(*Req)(nil),                           // 3: protobuf.Req
	(*Rsp)(nil),                           // 4: protobuf.Rsp
	(*Inner)(nil),                         // 5: protobuf.Inner
	(*TestSample)(nil),                    // 6: protobuf.TestSample
	(*KV)(nil),                            // 7: protobuf.KV
	(*TestAny)(nil),                       // 8: protobuf.TestAny
	(*TestOneof)(nil),                     // 9: protobuf.TestOneof
	(*Inner_M)(nil),                       // 10: protobuf.Inner.M
	nil,                                   // 11: protobuf.TestSample.MEntry
	(*TestSample_TestM)(nil),              // 12: protobuf.TestSample.TestM
	(*anypb.Any)(nil),                     // 13: google.protobuf.Any
	(*descriptorpb.FileOptions)(nil),      // 14: google.protobuf.FileOptions
	(*descriptorpb.ServiceOptions)(nil),   // 15: google.protobuf.ServiceOptions
	(*descriptorpb.MethodOptions)(nil),    // 16: google.protobuf.MethodOptions
	(*descriptorpb.MessageOptions)(nil),   // 17: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),     // 18: google.protobuf.FieldOptions
	(*descriptorpb.OneofOptions)(nil),     // 19: google.protobuf.OneofOptions
	(*descriptorpb.EnumOptions)(nil),      // 20: google.protobuf.EnumOptions
	(*descriptorpb.EnumValueOptions)(nil), // 21: google.protobuf.EnumValueOptions
	(*public.Data)(nil),                   // 22: protobuf.public.Data
}
var file_protobuf_sample_proto_depIdxs = []int32{
	0,  // 0: protobuf.Req.e:type_name -> protobuf.AllowAlias
	13, // 1: protobuf.Rsp.any:type_name -> google.protobuf.Any
	2,  // 2: protobuf.Rsp.e:type_name -> protobuf.Inner.E
	1,  // 3: protobuf.TestSample.e:type_name -> protobuf.Test
	11, // 4: protobuf.TestSample.m:type_name -> protobuf.TestSample.MEntry
	12, // 5: protobuf.TestSample.tm:type_name -> protobuf.TestSample.TestM
	7,  // 6: protobuf.TestSample.kvs:type_name -> protobuf.KV
	1,  // 7: protobuf.TestSample.es:type_name -> protobuf.Test
	13, // 8: protobuf.TestAny.any:type_name -> google.protobuf.Any
	14, // 9: protobuf.my_file_option:extendee -> google.protobuf.FileOptions
	15, // 10: protobuf.my_service_option:extendee -> google.protobuf.ServiceOptions
	16, // 11: protobuf.my_method_option:extendee -> google.protobuf.MethodOptions
	17, // 12: protobuf.my_message_option:extendee -> google.protobuf.MessageOptions
	18, // 13: protobuf.my_field_option:extendee -> google.protobuf.FieldOptions
	18, // 14: protobuf.my_tag_option:extendee -> google.protobuf.FieldOptions
	19, // 15: protobuf.my_oneof_option:extendee -> google.protobuf.OneofOptions
	20, // 16: protobuf.my_enum_option:extendee -> google.protobuf.EnumOptions
	21, // 17: protobuf.my_enum_value_option:extendee -> google.protobuf.EnumValueOptions
	0,  // 18: protobuf.my_service_option:type_name -> protobuf.AllowAlias
	22, // 19: protobuf.my_method_option:type_name -> protobuf.public.Data
	3,  // 20: protobuf.SearchService.Search:input_type -> protobuf.Req
	4,  // 21: protobuf.SearchService.Search:output_type -> protobuf.Rsp
	21, // [21:22] is the sub-list for method output_type
	20, // [20:21] is the sub-list for method input_type
	18, // [18:20] is the sub-list for extension type_name
	9,  // [9:18] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_protobuf_sample_proto_init() }
func file_protobuf_sample_proto_init() {
	if File_protobuf_sample_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_sample_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_sample_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_sample_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_sample_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_sample_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_sample_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestAny); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_sample_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestOneof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_sample_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inner_M); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_sample_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSample_TestM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protobuf_sample_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Req_ID)(nil),
		(*Req_OBSOLETEName)(nil),
	}
	file_protobuf_sample_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*TestOneof_A)(nil),
		(*TestOneof_B)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_sample_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 9,
			NumServices:   1,
		},
		GoTypes:           file_protobuf_sample_proto_goTypes,
		DependencyIndexes: file_protobuf_sample_proto_depIdxs,
		EnumInfos:         file_protobuf_sample_proto_enumTypes,
		MessageInfos:      file_protobuf_sample_proto_msgTypes,
		ExtensionInfos:    file_protobuf_sample_proto_extTypes,
	}.Build()
	File_protobuf_sample_proto = out.File
	file_protobuf_sample_proto_rawDesc = nil
	file_protobuf_sample_proto_goTypes = nil
	file_protobuf_sample_proto_depIdxs = nil
}
